package enstabretagne.optimousse.pathplanner.views;

import enstabretagne.optimousse.pathplanner.algorithms.model.AbstractAlgorithmModel;
import enstabretagne.optimousse.pathplanner.controllers.PathPlannerController;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JTabbedPane;

/**
 *
 * @author jem
 */
public class MainView extends javax.swing.JFrame implements Observer {

    private PathPlannerController controller;
    private static ArrayList<AbstractAlgorithmModel> modelsList=new ArrayList<AbstractAlgorithmModel>();

    private static MainView me;
    
    public static AbstractAlgorithmModel getCurrentModel(){
        if(modelsList.size()>0) return modelsList.get(getCurrentTabbedPaneIndex());
        return null;
    }
    
    public static MainView getInstance(PathPlannerController controller){
        if(me==null){
            me=new MainView(controller);
        }
        return me;
    }
    
    public static MainView getInstance(){
        if(me==null){
            me=new MainView(null);
        }
        return me;
    }
    
    /** Creates new form MainView */
    private MainView(PathPlannerController controller) {
        this.controller = controller;
        initComponents();
//        WorldWindowGLCanvas g=new WorldWindowGLCanvas();
//        LayerList ll=new LayerList();
//        ll.add(new BMNGOneImage());
//        ll.add(new BMNGWMSLayer());
//        ll.add(new MSVirtualEarthLayer());
//        g.setModel(new BasicModel(new EarthFlat(), ll));
//        g.getModel().getLayers().add(new MSVirtualEarthLayer());
//        g.setName("Mission1");
//        missionsTabbedPane.add(g);
//        worldWindowGLCanvas1.setModel(new BasicModel());
//        worldWindowGLCanvas2.setModel(new BasicModel());
//        worldWindowGLCanvas2.getModel().getLayers().add(new BMNGWMSLayer());
//        Dimension sd = Toolkit.getDefaultToolkit().getScreenSize(); // simple way to center the frame
//        Dimension thisd = getSize();
//        this.setLocation(sd.width / 2 - thisd.width / 2, sd.height / 2 - thisd.height / 2);
        setVisible(true);
////        worldWindowGLCanvas1.addMouseMotionListener(new MouseMotionListener() {
////
////            @Override
////            public void mouseDragged(MouseEvent me) {
////                if(me.isControlDown()) me.consume();
////                System.out.println("Consumed");
////            }
////
////            @Override
////            public void mouseMoved(MouseEvent me) {
////                
////            }
////        });
//
//
//        worldWindowGLCanvas2.getInputHandler().addMouseMotionListener(new MouseMotionListener() {
//
//            @Override
//            public void mouseDragged(MouseEvent me) {
//                if (me.isControlDown()) {
//                    me.consume();
//                }
//                System.out.println("Consumed");
//            }
//
//            @Override
//            public void mouseMoved(MouseEvent me) {
//            }
//        });
//
//        worldWindowGLCanvas2.getInputHandler().addMouseListener(new MouseListener() {
//
//            @Override
//            public void mouseClicked(MouseEvent me) {
//                System.out.println("clicked");
//                if (me.isControlDown()){
//                    me.consume(); // no "go to" behaviour
//                }
//            }
//
//            @Override
//            public void mousePressed(MouseEvent me) {
//            }
//
//            @Override
//            public void mouseReleased(MouseEvent me) {
//            }
//
//            @Override
//            public void mouseEntered(MouseEvent me) {
//            }
//
//            @Override
//            public void mouseExited(MouseEvent me) {
//            }
//        });
    }
    
    public static JTabbedPane getMissionTabbedPane(){
        return missionsTabbedPane;
    }
    
    public static int getNumberOfTabbedPanes(){
        return missionsTabbedPane.getTabCount();
    }
    
    public static int getCurrentTabbedPaneIndex(){
        return missionsTabbedPane.getSelectedIndex();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        missionsTabbedPane = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        loadMenuItem = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("Map");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(newMenuItem);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Settings");
        jMenuItem6.setEnabled(false);
        jMenu1.add(jMenuItem6);

        loadMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loadMenuItem.setText("Load");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(loadMenuItem);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Export / Save");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("?");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("About");
        jMenu2.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Help");
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 581, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(missionsTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(missionsTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new SettingsFrame(controller).setVisible(true);
            }
        });
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed
        new FileChooser(controller).setVisible(true);
    }//GEN-LAST:event_loadMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainView(new PathPlannerController()).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem loadMenuItem;
    private static javax.swing.JTabbedPane missionsTabbedPane;
    private javax.swing.JMenuItem newMenuItem;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object o1) {
        validate();
    }
}
